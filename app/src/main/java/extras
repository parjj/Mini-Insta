content://com.example.instagalleria.fileprovider/external_files/Android/data/com.example.instagalleria/files/Pictures/photo5502566780887569254.jpg

 imageView.setImageURI(Uri.parse(imgUrl));

 Intent { dat=content://com.android.providers.media.documents/document/image:46 flg=0x1 }

 content://com.android.providers.media.documents/document/image%3A46   filepathuri


  content://com.android.providers.media.documents/document/image%3A47
content://com.android.providers.media.documents/document/image%3A46
-----------------------------------------------------------
 // upload to photo library
    fun uploadToPhotoLibrary() {


        var images_from_db = getAllDocumentsFromDB()

        // Get the text fragment instance
        val photoLibrary = PhotoLibrary()

        // Get the support fragment manager instance
        val manager = fragmentManager

        // Begin the fragment transition using support fragment manager
        val transaction = manager!!.beginTransaction()

        // Replace the fragment on container
        var bundle = Bundle()
        bundle.putSerializable("upload_image", images_from_db)
        photoLibrary.arguments = bundle
        transaction.add(R.id.mainFrgament, photoLibrary, "photo_library")
        transaction.addToBackStack("PL")

        // Finishing the transition
        transaction.commit()

    }
-------------------------------------------------------------------------------------------
Note: Using replace fragment is preferred over using add, as it doesn’t store unnecessary
fragments in the memory, and also reduce the UI rendering need. However if the current
 fragment contains a webview, to open the next fragment, using add is better, this is in the
 event when you pop that “next” fragment, your existing fragment with webview is retain and doesn’t need to be reloaded.
---------------

color theme -https://www.w3schools.com/colors/colors_picker.asp

 android:backgroundTint="#ffffe5"
            android:background="@drawable/relative_border"

 android:backgroundTint="#e5ffe5"
            android:background="@drawable/relative_border"

https://www.zoftino.com/firebase-cloud-storage-upload-download-delete-files-android-example#upload-fragment

-------------------------------------------------------------
1 kotlin
fun setOnClickListener(l: (View) -> Unit)


view.setOnClickListener(object : View.OnClickListener {
    override fun onClick(v: View?) {
        toast("Hello")
    }
})

1
view.setOnClickListener({ v -> toast("Hello") })
view.setOnClickListener { v -> doSomething(v) }

view.setOnClickListener { doSomething(it) }

No need to write

val view = itemView.findViewById(R.id.date) as TextView
view.text = forecast.date.toDateString()
Just

itemView.date.text = forecast.date.toDateString()

-------------------------------------------------------------
/ Creating Method to get the selected image file Extension from File Path URI.
public String GetFileExtension(Uri uri) {

    ContentResolver contentResolver = getContentResolver();

    MimeTypeMap mimeTypeMap = MimeTypeMap.getSingleton();

    // Returning the file Extension.
    return mimeTypeMap.getExtensionFromMimeType(contentResolver.getType(uri)) ;

--------------------------------------------------------------------------------
check these out

https://www.simplifiedcoding.net/firebase-storage-example/

check this out
https://codeexa.com/android-create-and-delete-in-firebase-realtime-database-with-storage/

https://www.simplifiedcoding.net/firebase-storage-example/

https://www.raywenderlich.com/1364094-android-fragments-tutorial-an-introduction-with-kotlin

https://www.raywenderlich.com/1560485-android-recyclerview-tutorial-with-kotlin


---------------------------------------------------------------------------------
        var cr = context!!.contentResolver
                        val bitmap = MediaStore.Images.Media.getBitmap(cr, filePathUri)
------------------------------------------------------------------------------------------------

             // Get the text fragment instance
                        val textFragment = TextFragment()

                        // Get the support fragment manager instance
                        val manager = supportFragmentManager

                        // Begin the fragment transition using support fragment manager
                        val transaction = manager.beginTransaction()

                        // Replace the fragment on container
                        transaction.replace(R.id.fragment_container,textFragment)
                        transaction.addToBackStack(null)

                        // Finishing the transition
                        transaction.commit()
 ------------------------------------------------------------------------------------------------
   media contents   pick audio from gallery                   //Use MediaStore.Audio.Media.EXTERNAL_CONTENT_URI
                        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Audio.Media.EXTERNAL_CONTENT_URI);

                        Pick Video file from Gallery:
                        //Use MediaStore.Audio.Media.EXTERNAL_CONTENT_URI
                        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Video.Media.EXTERNAL_CONTENT_URI);
                        Pick Image from gallery:
                        //Use  MediaStore.Images.Media.EXTERNAL_CONTENT_URI
                        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);

                        Pick Media Files or images:
                         Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                        intent.setType("image/* video/*");

                        https://stackoverflow.com/questions/3401579/get-filename-and-path-from-uri-from-mediastore

------------------------------------------------------------------------------------------------ ------------------------------------------------------------------------------------------------
In order to access your Firebase Storage files, you'll need to first get a reference to the FirebaseStorage object, and then create a
StorageReference to your project's URL and the file that you want to download. You can find your project's URL at the top of the Files section of Storage in the Firebase Console.
StorageReference storageRef = storage.getReferenceFromUrl("gs://tutsplus-firebase.appspot.com").child("android.jpg");
try {
    final File localFile = File.createTempFile("images", "jpg");
    storageRef.getFile(localFile).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {
        @Override
        public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {
            Bitmap bitmap = BitmapFactory.decodeFile(localFile.getAbsolutePath());
            mImageView.setImageBitmap(bitmap);

        }
    }).addOnFailureListener(new OnFailureListener() {
        @Override
        public void onFailure(@NonNull Exception exception) {
        }
    });
} catch (IOException e ) {}
Next, you can create a File object and attempt to load the file you want by calling getFile on your StorageReference with the new File object
passed as a parameter. Since this operation happens asynchronously,
you can add an OnSuccessListener and OnFailureListener to your call in order to handle either contingency.
------------------------------------------------------------------------------------------------------------------------
public void updateProgress(UploadTask.TaskSnapshot taskSnapshot) {

    @SuppressWarnings("VisibleForTests") long fileSize =
		taskSnapshot.getTotalByteCount();

    @SuppressWarnings("VisibleForTests")
		long uploadBytes = taskSnapshot.getBytesTransferred();

    long progress = (100 * uploadBytes) / fileSize;

    ProgressBar progressBar = (ProgressBar) findViewById(R.id.pbar);
    progressBar.setProgress((int) progress);
}

@Override
public void onProgress(UploadTask.TaskSnapshot taskSnapshot) {
    updateProgress(taskSnapshot);
}

---------------------------------------------------------------------------------------------------------------------------------
For storing the url perfectly from your Firebase storage to your Firebase Database, you can use a code like this:

This code also contains the part where you can upload the image to your firebase storage, so I think this would make you relate to your code and may help you, even more.

private void uploadFile(Bitmap bitmap) {

        FirebaseStorage storage = FirebaseStorage.getInstance();
        final StorageReference storageRef = storage.getReference();

        final StorageReference ImagesRef = storageRef.child("images/"+mAu.getCurrentUser().getUid()+".jpg");


        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.JPEG, 20, baos);
        byte[] data = baos.toByteArray();
        final UploadTask uploadTask = ImagesRef.putBytes(data);



        uploadTask.addOnFailureListener(new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception exception) {
                Log.i("whatTheFuck:",exception.toString());
            }
        }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
            @RequiresApi(api = Build.VERSION_CODES.KITKAT)
            @Override
            public void onSuccess(final UploadTask.TaskSnapshot taskSnapshot) {
                // taskSnapshot.getMetadata() contains file metadata such as size, content-type, and download URL.

                Task<Uri> urlTask = uploadTask.continueWithTask(new Continuation<UploadTask.TaskSnapshot, Task<Uri>>() {
                    @Override
                    public Task<Uri> then(@NonNull Task<UploadTask.TaskSnapshot> task) {
                        if (!task.isSuccessful()) {
                            Log.i("problem", task.getException().toString());
                        }

                        return ImagesRef.getDownloadUrl();
                    }
                }).addOnCompleteListener(new OnCompleteListener<Uri>() {
                    @Override
                    public void onComplete(@NonNull Task<Uri> task) {
                        if (task.isSuccessful()) {
                            Uri downloadUri = task.getResult();

                            DatabaseReference ref = FirebaseDatabase.getInstance().getReference().child("users").child(mAu.getCurrentUser().getUid());

                            Log.i("seeThisUri", downloadUri.toString());// This is the one you should store

                            ref.child("imageURL").setValue(downloadUri.toString());


                        } else {
                            Log.i("wentWrong","downloadUri failure");
                        }
                    }
                });
             }
        });

    }
    ---------------------------------------------------------------------------------------------------------------------------------
Learning

///*
//        ### source : developer.android.com ###
//
//        VH onCreateViewHolder (ViewGroup parent, int viewType)
//            Called when RecyclerView needs a new RecyclerView.ViewHolder of the given type to
//            represent an item.
//
//            This new ViewHolder should be constructed with a new View that can
//            represent the items of the given type. You can either create a new View manually
//            or inflate it from an XML layout file.
//
//            The new ViewHolder will be used to display items of the adapter using
//            onBindViewHolder(ViewHolder, int, List). Since it will be re-used to display different
//            items in the data set, it is a good idea to cache references to sub views of the View
//            to avoid unnecessary findViewById(int) calls.
//
//        Parameters
//            parent ViewGroup: The ViewGroup into which the new View will be added after it
//                              is bound to an adapter position.
//            viewType int: The view type of the new View.
//
//        Returns
//            VH : A new ViewHolder that holds a View of the given view type.
//    */

/*
        ### source : developer.android.com ###

        void onBindViewHolder (VH holder, int position, List<Object> payloads)
            Called by RecyclerView to display the data at the specified position. This method should
            update the contents of the itemView to reflect the item at the given position.

        Parameters
            holder VH: The ViewHolder which should be updated to represent the contents of the
                       item at the given position in the data set.
            position int: The position of the item within the adapter's data set.
            payloads List: A non-null list of merged payloads. Can be empty list if requires
                           full update.
    */

---------------------------------------------------------------------------------------------------------------------------------

https://www.letsbuildthatapp.com/course_video?id=1322

https://codingwithmitch.com/blog/android-recyclerview-onclicklistener/

https://www.tutlane.com/tutorial/android/android-progressbar-with-examples

https://firebaseopensource.com/projects/firebase/friendlyeats-android/

https://time2hack.com/2018/07/advanced-user-actions-for-firebase-login/

---------------------------------------------------------------------------------------------------------------------------------

 <LinearLayout
            android:id="@+id/linear2"
            android:orientation="vertical"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:visibility="gone">
        <ImageView
                android:id="@+id/cameraImg"
                android:layout_margin="10dp"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:layout_weight="1"
        />
        <Button
                android:id="@+id/uploadButton"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="upload"
                android:layout_gravity="center"
        />
        <!--<include-->
                <!--layout="@layout/toolbar_layout"-->
                <!--android:layout_width="match_parent"-->
                <!--android:layout_height="wrap_content"-->
                <!--android:layout_gravity="bottom"-->
                <!--android:id="@+id/camera_toolbar"-->
        <!--/>-->
    </LinearLayout>


---------------------------------------------------------------------------------------------------------------------------------

    yocahuyov@freemaillink.com

    test1@cloud-mail.net

https://www.trash-mail.com/new-address/


    users and pwd

The given password is invalid. [ Password should be at least 6 characters

    test001@opentrash.com 001001001
    test002@opentrash.com 002
    test003@opentrash.com 003
    test004@opentrash.com 004
    test005@opentrash.com 005

 getFragmentManager().popBackStack(ProductFragment.PRODUCT_FRAGMENT, FragmentManager.POP_BACK_STACK_INCLUSIVE);

 ---------------------------------------------------------------------------------------------------------------------------------
 // using onstart method gave a problem when uploading the photo  on selection it jumps to the onstart method of all fragments starting from loginpage
     // check to see if the user is already signed in
 //    override fun onStart() {
 //        super.onStart()
 //        // Check if user is signed in (non-null) and update UI accordingly.
 //
 //        if (auth.currentUser != null) {
 //            var currentUser: String? = auth.currentUser!!.email
 //
 //            val user = auth.currentUser
 //            user?.let {
 //                // Name, email address, and profile photo Url
 //                val name = user.displayName
 //                // val email = user.email
 //
 //                if (name != null) {
 //                    transactionCall(name)
 //                }
 //            }
 //            //updateUI(currentUser)
 //        }
 //
 //
 //
 //    }



    fun loginUserCall(email: String, password: String) {
        auth.signInWithEmailAndPassword(email, password).addOnCompleteListener(OnCompleteListener { task ->

            if (task.isSuccessful) {
                Log.d(TAG, "signInWithEmail:success")
            } else {
                // If sign in fails, display a message to the user.
                Log.w(TAG, "signInWithEmail:failure", task.exception)
            }

        })


    }

 ---------------------------------------------------------------------------------------------------------------------------------
 if (auth.currentUser != null) {

            val user = auth.currentUser


                // Name, email address, and profile photo Url
                val name = user!!.displayName
                 val email = user.email
                Log.d(TAG,"direct username" +name)
                if (name != null) {
                    transactionCall(name)
                }



        }

        //        val bmOptions = BitmapFactory.Options()
        //        val photo_bitmap = BitmapFactory.decodeFile(currentPhotoPath, bmOptions)

                         // Toast.makeText(context, "Uploaded to firebase storage ", Toast.LENGTH_SHORT).show()

        //                    var handler = Handler()
        //                    handler.postDelayed(Runnable {
        //                        progressBar.setProgress(0)
        //
        //                    }, 500)


 ---------------------------------------------------------------------------------------------------------------------------------
list view scrolling

https://dzone.com/articles/introduction-to-xamarinforms-for-android-developer-4


EditText etUserName = (EditText) findViewById(R.id.txtUsername);
String strUserName = etUserName.getText().toString();

 if(TextUtils.isEmpty(strUserName)) {
    etUserName.setError("Your message");
    return;
 }

 ---------------------------------------------------------------------------------------------------------------------------------


    <include layout="@layout/toolbar_top"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:id="@+id/main_toolbar"
             android:visibility="gone"/>
 ---------------------------------------------------------------------------------------------------------------------------------
//issue on multiple select as images gets loaded twice


fun getImageUri(inContext: Context, inImage: Bitmap): Uri {
    var bytes = ByteArrayOutputStream()
    inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
    var path = MediaStore.Images.Media.insertImage(inContext.getContentResolver(), inImage, "Title", null);
    var uri = Uri.parse(path);
    return uri
}

//    override fun onStop() {
//        super.onStop()
//        storageRef.child("uploads/").delete()
//    }


//The reason why we have saved image paths in the database is because firebase storage do not provide any api to list files or folders.
// The only way to get the storage files is by keeping an index of files in our database.
private Fragment getCurrentFragment(){
    FragmentManager fragmentManager = getSupportFragmentManager();
    String fragmentTag = fragmentManager.getBackStackEntryAt(fragmentManager.getBackStackEntryCount() - 1).getName();
    Fragment currentFragment = fragmentManager.findFragmentByTag(fragmentTag);
    return currentFragment;
}
 ---------------------------------------------------------------------------------------------------------------------------------

//    fun fetchLikesFromDB(): Long {
//
//        Constants.db_storageRef.whereEqualTo("URI", uriString).get()
//            .addOnSuccessListener { result ->
//                for (document in result) {
//
//                    var checkLikes = document.data
//
//                    if (document.data.containsKey("LIKES")) {
//                        var likes_no :Long  = checkLikes.get("LIKES") as Long
//
//                        if(likes_no >=0)
//                        {
//                            likes_count= likes_no+1
//                            hashMap_forHearts.put("LIKES", likes_count)
//
//
//                        }
//
//                    }else {
//
//                        hashMap_forHearts.put("LIKES", likes_count)
//                    }
//
//                   documentReferenceCall(hashMap_forHearts)
//                }
//            }
//            .addOnFailureListener(OnFailureListener { exception: Exception ->
//                Log.d(
//                    Constants.TAG,
//                    "failure to upload likes to cloud db"
//                )
//            })
//
//        return likes_count
//    }




 ---------------------------------------------------------------------------------------------------------------------------------
